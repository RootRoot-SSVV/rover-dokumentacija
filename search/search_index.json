{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ROVER","text":"<p>Tijekom \u010detiri godine strukovnog obrazovanja uo\u010dili smo jedan problem. Iako poha\u0111amo strukovni smjer, na\u0161a \u0161kola ne nudi radnu praksu ili prakti\u010dne radove. Stoga smo prona\u0161li rje\u0161enje i razvili projekt koji \u0107e potaknuti u\u010denike na kreativnost te im pokazati va\u017enost open-source projekata.</p> <p>Projekt ROVER (Remote Open-source Vehicle for Educational Research) ne samo da demonstrira na\u0161e znanje, ve\u0107 zbog svoje skalabilnosti mo\u017ee poslu\u017eiti kao platforma za u\u010denje programiranja, elektronike i 3D modeliranja. Korisnici ove platforme mogu se osloniti na na\u0161u dokumentaciju, ali \u0107e isto tako biti potaknuti na samostalno istra\u017eivanje putem interneta.</p> <p>Projekt je namijenjen svima koji \u017eele razvijati gore navedene vje\u0161tine. Osim toga, korisnici \u0107e imati priliku u\u010diti o timskom radu. S obzirom na to da je nerealno o\u010dekivati da mladi ve\u0107 imaju sve potrebne vje\u0161tine, formirat \u0107e se grupe koje \u0107e zajedno raditi na projektu, svatko unutar svog podru\u010dja interesa.</p> <p>Kako \u0107e se u\u010denje odvijati? ROVER je open-source vozilo kojim se upravlja putem aplikacije. Program je vrlo skalabilan, \u0161to olak\u0161ava \u010ditanje koda i njegovo prilago\u0111avanje. Za izradu modula potrebno je dizajnirati PCB, programirati kod za mikroupravlja\u010d, razviti dodatak za aplikaciju i izraditi ku\u0107i\u0161te za modul. Iako se \u010dini kao puno posla, za dvije do tri osobe to je sasvim izvedivo.</p>"},{"location":"#problemi-koje-rover-rijesava","title":"Problemi koje ROVER rije\u0161ava","text":"<ul> <li>Primjena teorijskog znanja</li> <li>Stvarno Iskustvo s hardverom i softverom</li> <li>Razvoj kriti\u010dkog mi\u0161ljenja i rje\u0161avanja problema</li> <li>Kolaborativno u\u010denje i timski rad</li> <li>Motivacija kroz igru i istra\u017eivanje</li> </ul>"},{"location":"#mogucnosti","title":"Mogu\u0107nosti","text":"<p>ROVER je vozilo koje se mo\u017ee upravljati mobilnom aplikacijom. Aplikacijom se upravlja kretanje i moduli. Moduli su kockice, koje se sla\u017eu na ROVER i time vozilo dobiva dodatnu funkcionalnost. Trenutno ROVER ima module mjerenja udaljenosti, matrix ekran, i demo modul. Ovi moduli osim \u0161to dodaju funkcionalnost, pokazuju mogu\u0107nosti razvoja modula.</p> <p>Demo modul pokazuje osnovne mogu\u0107nosti ROVERA, a to je kontroliranje sklopovlja. Putem aplikacije se mogu kontrolirati tri LED diode, jedna RGB dioda i zujalica. Svaka komponenta se kontrolira aplikacijom.</p> <p>Modul mjerenja udaljenosti koristi ultrasoni\u010dni modul koji pokazuje udaljenost na mobilnoj aplikaciji. Ovaj modul pokazuje ulazno/izlazne mogu\u0107nosti ROVERA, odnosno osim \u0161to ROVER mo\u017ee slati podatke modulu, mo\u017ee ih i primati.</p> <p>Zadnji modul napravljen je matrix modul. On mo\u017ee prikazati sliku nacrtanu preko mobilne aplikacije. Ovo pokazuje mogu\u0107nost serijskog prijenosa podataka na module. Na dokumentaciju se \u010desto ne ula\u017ee dovoljno vremena, ali ona je u nekim slu\u010dajevima i jedini izvor informacija. Zato smo odlu\u010dili odabrati tehnologije koje su veoma dobro dokumentirane i odlu\u010dili smo sami napraviti kvalitetan uvod u stvaranje modula kako bi korisnicima bilo \u0161to lak\u0161e se uklju\u010diti u ovaj projekt.</p>"},{"location":"buducnost/","title":"Budu\u0107nost","text":"<p>U ovom projektu, stvarno je istina da je jedino ograni\u010denje va\u0161a ma\u0161ta. Trudili smo se stvoriti sustav koji je jednostavno pro\u0161iriv, otvaraju\u0107i vrata beskona\u010dnim mogu\u0107nostima. Imamo nekoliko uzbudljivih ideja za budu\u0107nost projekta. Glavna je ideja stvoriti web stranicu koja bi funkcionirala kao platforma za razmjenu ideja i povezivanje ljudi zainteresiranih za razvoj modula. Na toj platformi, pojedinci mogu objaviti svoje ideje, a zainteresirani se mogu pridru\u017eiti timu kako bi ih zajedno razvili. Osim toga, imamo i konkretnije ideje za razvoj novih modula, uklju\u010duju\u0107i LCD modul, modul za pra\u0107enje kvalitete zraka, senzor pra\u0107enja svjetlosti te modul za robotsku ruku. Tako\u0111er razmi\u0161ljamo o pobolj\u0161anju ultrazvu\u010dnog modula kako bi ROVER mogao autonomno navigirati i kretati se bez potrebe za stalnim nadzorom. S ovim planovima, vjerujemo da \u0107e projekt i dalje rasti i razvijati se kako bi pru\u017eio jo\u0161 vi\u0161e mogu\u0107nosti za kreativnost i inovacije.</p>"},{"location":"buducnost/#marketing","title":"Marketing","text":"<p>Ovaj projekt nije stvoren s ciljem profitiranja, ve\u0107 s namjerom dijeljenja znanja i poticanja u\u010denja. Za nas je ovo bilo iznimno va\u017eno iskustvo koje je omogu\u0107ilo primjenu teorijskog znanja u praksi, ali isto tako \u017eelimo da bude korisno iskustvo i za druge. Projekt \u0107e uvijek ostati besplatan i open-source, te se nadamo da \u0107e nastaviti rasti i razvijati se s vremenom. Nema potrebe za uvo\u0111enjem reklama jer na\u0161 fokus nije na stvaranju profita, a prisustvo reklama samo bi naru\u0161ilo korisni\u010dko iskustvo. \u017delimo da ovaj projekt ostane dostupan svima i nadamo se da \u0107e se \u0161iriti kroz uklju\u010divanje \u0161to ve\u0107eg broja \u0161kola i pojedinaca zainteresiranih za stjecanje znanja.</p>"},{"location":"buducnost/#zakljucak","title":"Zaklju\u010dak","text":"<p>Ovaj projekt predstavljao je iznimno va\u017eno iskustvo za nas, pru\u017eaju\u0107i nam priliku da nau\u010dimo nove stvari i unaprijedimo ve\u0107 postoje\u0107e vje\u0161tine. Rad u timu pokazao se klju\u010dnim, jer smo stekli vrijedno iskustvo suradnje, \u0161to je bitna vje\u0161tina za na\u0161u budu\u0107nost. Sretni smo \u0161to smo imali priliku nau\u010diti mnogo toga iz razli\u010ditih podru\u010dja industrije, \u0161to nam je omogu\u0107ilo \u0161iru perspektivu i bolje razumijevanje kompleksnosti projekta. Nadamo se da \u0107e na\u0161 rad inspirirati i potaknuti druge da se uklju\u010de te doprinesu projektu svojim idejama i vje\u0161tinama. Na kraju, \u017eelimo se zahvaliti Strukovnoj \u0160koli Vice Vlatkovi\u0107a i svim njihovim djelatnicima na njihovoj podr\u0161ci i poticaju koji su nam pru\u017eili tijekom ovog projekta.</p>"},{"location":"nacin_rada/","title":"Na\u010din rada","text":""},{"location":"nacin_rada/#paljenje-i-spajanje-aplikacije-i-vozila","title":"Paljenje i spajanje aplikacije i vozila","text":"<p>Prije pokretanja aplikacije, uklju\u010dite Bluetooth i lokacijske usluge na va\u0161em ure\u0111aju kako bi aplikacija pravilno funkcionirala. Ukoliko neki od navedenih servisa nije aktiviran, pojavit \u0107e se upozorenje, a aplikacija \u0107e se ugasiti.</p> <p></p> <p>Nakon \u0161to omogu\u0107ite pristup Bluetooth-u i lokaciji, aplikacija \u0107e zapo\u010deti pretragu za ROVER-om. Pritiskom na gumb pokre\u0107emo skeniranje ure\u0111aja, \u0161to omogu\u0107uje prikaz svih dostupnih ure\u0111aja s kojima se mo\u017eemo povezati. Odaberite ROVER i nakon uspje\u0161nog spajanja, ekran \u0107e se prebaciti na upravlja\u010dko su\u010delje.</p> <p></p>"},{"location":"nacin_rada/#mjenjanje-jezika-te-informacije-o-aplikaciji","title":"Mjenjanje jezika te informacije o aplikaciji","text":"<p>Pritiskom na meni mo\u017eete odabrati jezik su\u010delja. Trenutno je aplikacija prevedena na hrvatski i engleski, no zbog svoje jednostavne arhitekture, omogu\u0107eno je dodavanje jo\u0161 jezika.</p> <p></p> <p>Pritiskom na gumb u gornjem desnom kutu (info) prikazat \u0107e se informacije o aplikaciji, uklju\u010duju\u0107i verziju, linkove do GitHub repozitorija, web verzije dokumentacije, pravila o privatnosti te licence. U licencama su navedeni svi paketi i programi koji su kori\u0161teni pri stvaranju aplikacije.</p> <p></p> <p>U licencama su navedeni svi paketi i programi koji su kori\u0161teni pri stvaranju aplikacije.</p> <p></p>"},{"location":"nacin_rada/#upravljanje-rover-a-te-skeniranje","title":"Upravljanje ROVER-a te skeniranje","text":"<p>Na slici je prikazano upravlja\u010dko su\u010delje za ROVER. Sa lijeve i desne strane su postavljeni gumbi koji slu\u017ee za pokretanje ROVER-a. U sredini se nalaze upravlja\u010dke plo\u010de modula (u daljnjem tekstu nazvane panelima). Uvijek postoji osnovni panel koji slu\u017ei za skeniranje ROVER modula. Kada se na tom panelu pritisne gumb \u201eSkeniraj\u201c (Rescan), ROVER ponovno skenira i prika\u017ee sve spojene module. Spojene module prikazuje u novim karticama, a kada se odabere neka od njih pritiskom na njihovu ikonu, panel se promjeni za taj odre\u0111eni modul.</p> <p></p> <p>Ovako izgleda ekran s 3 spojena modula:</p> <p></p>"},{"location":"nacin_rada/#moduli","title":"Moduli","text":"<p>Trenutno postoje tri modula, ali ih se planira napraviti jo\u0161. Ti moduli su: \u201cDemo modul\u201d, \u201cUltrasoni\u010dni modul\u201d i \u201cMatrix modul\u201d.</p>"},{"location":"nacin_rada/#demo-modul","title":"Demo modul","text":"<p>Demo modul sadr\u017ei diode i zvu\u010dnicu koje se kontroliraju. Na su\u010delju aplikacije postoje kontrole za svaku navedenu komponentu. Prekida\u010di upravljaju jednobojnim diodama, dok kliza\u010di upravljaju bojom RGB diode. Zadnji prekida\u010d upravlja zujalicom. Pritiskom na te odre\u0111ene komponente grafi\u010dkog su\u010delja upravljate Demo modulom.</p> <p></p>"},{"location":"nacin_rada/#matrix-modul","title":"Matrix modul","text":"<p>Sadr\u017ei matrix ekran prikazan u grafi\u010dkom su\u010delju kao 8x8 tablica. Pritiskom na odre\u0111eno polje slika na mobilnoj aplikaciji se iscrtava na ROVER modulu. Kada se prebacite na drugi modul, stanje Matrix modula ostaje nepromijenjeno.</p> <p></p>"},{"location":"nacin_rada/#ultrasonicni-modul","title":"Ultrasoni\u010dni modul","text":"<p>Prikazuje udaljenost od neke prepreke u centimetrima.</p> <p></p>"},{"location":"nacin_rada/#izlazak-iz-aplikacije","title":"Izlazak iz aplikacije","text":"<p>Pritiskom na gumb <code>Izlaz</code> (<code>Exit</code>) se prikazuje upit za potvrdu za izlazak iz aplikacije.</p> <p></p>"},{"location":"stvaranje_modula/","title":"Stvaranje modula","text":""},{"location":"stvaranje_modula/#osnove-komuniciranja","title":"Osnove komuniciranja","text":"<p>U komuniciranju se koristi bluetooth classic. Za komunikaciju izme\u0111u HC-05 i mikroupravlja\u010da koristi se UART protokol. U oba smjera se \u0161alje niz podataka s dogovorenim mjestima.</p> <p>Podaci koji se \u0161alju s aplikacije mikroupravlja\u010du:</p> <p></p> <p>254 ozna\u010dava po\u010detak poruke, ID ozna\u010dava koji modul se koristi ili koja glavna akcija se doga\u0111a. Podatak motori sadr\u017ei broj u kojem pozicija bita ozna\u010dava je li pojedina\u010dan gumb smjera pritisnut ili ne. Ostalo su podaci za modul.</p> <p>Podaci koji se \u0161alju s mikroupravlja\u010da prema aplikaciji:</p> <p></p> <p>ID ozna\u010dava koji modul \u0161alje podatak, a sve ostalo su podaci koje modul \u0161alje.</p>"},{"location":"stvaranje_modula/#funkcije-za-komunikaciju-u-flutter-aplikaciji","title":"Funkcije za komunikaciju u Flutter aplikaciji","text":""},{"location":"stvaranje_modula/#void-messagereactionlistint-message","title":"<code>void messageReaction(List&lt;int&gt; message);</code>","text":"<p>Funkcija koja je potrebna modificirati se ako modul ima povratnu poruku (npr. Ultrasoni\u010dni modul)</p> <pre><code>/// Pridru\u017ei funkcije zadanom ID-u i modulu\n///\n/// Na osnovu prvog polja biti \u0107e druga\u010dija reakcija\n/// Reakcija se dodaje samo modulima koji imaju povratnu poruku roveru\nvoid messageReaction(List&lt;int&gt; message) {\n    switch (message[0]) {\n        case 1:\n            /// Ultrasonic modul\n            ultrasonicModuleProvider.getDistance(message);\n            break;\n        case 2:\n            /// Matrix modul\n            /// Nema povratnu informaciju\n            break;\n        case 3:\n            /// ID je neiskori\u0161ten\n            break;\n        case 4:\n            /// ID je neiskori\u0161ten\n            break;\n        case 5:\n            /// ID je neiskori\u0161ten\n            break;\n        case 6:\n            /// ID je neiskori\u0161ten\n            break;\n        case 7:\n            /// Demo modul\n            /// Nema povratnu informaciju\n        break;\n            case 17:\n            /// Ponovno skeniranje\n            _panelsProvider.updateLists(message);\n            break;\n        default:\n            dev.log('no case');\n            break;\n        }\n        notifyListeners();\n    }\n</code></pre> <p>Ako \u017eelite da va\u0161 \u017eeljeni modul daje podatke i aplikacija reagira, stavite dodatak koda u odre\u0111eni slu\u010daj.</p>"},{"location":"stvaranje_modula/#changedataformodulelistint-list","title":"<code>changeDataForModule(List&lt;int&gt; list);</code>","text":"<p>Mijenjanje podataka koja se \u0161alje za modul. Podaci su izra\u017eeni u listi.</p> <pre><code>/// Promjeni [dataForModule]\n///\n/// Promjeni samo dio koji se ondosi na podatke za modul\nvoid changeDataForModule(List&lt;int&gt; list) {\n    for (int i = 0; i &lt; list.length; i++) {\n        dataForModule[i] = list[i];\n    }\n}\n</code></pre>"},{"location":"stvaranje_modula/#sendmessagebool-changingmodule-false","title":"<code>sendMessage({bool changingModule = false});</code>","text":"<p>\u0160alje podatke koji se nalaze u dataForModule. Sadr\u017ei opcionalni argument changingModule, koji je na po\u010detku neto\u010dan.</p> <pre><code>/// Po\u0161alji poruku roveru\nvoid sendMessage({bool changingModule = false}) async {\n    sending = true;\n    Uint8List message;\n    if (!changingModule) {\n        message = Uint8List.fromList([254, mode, motorControl] + dataForModule);\n    } else {\n        message = Uint8List.fromList(\n            [254, 19, motorControl, mode] + List.filled(61, 0));\n    }\n    dev.log('$message');\n    try {\n        connection!.output.add(message);\n        await connection!.output.allSent;\n    } catch (e) {\n        dev.log('Catch in: void sendMessage()');\n    }\n    sending = false;\n}\n</code></pre>"},{"location":"stvaranje_modula/#funkcije-za-komunikaciju-za-mikroupravljac","title":"Funkcije za komunikaciju za mikroupravlja\u010d","text":""},{"location":"stvaranje_modula/#void-response","title":"<code>void response();</code>","text":"<pre><code>void response() {\n    gpio_put(25, uart_data_waiting);\n    motor_driver(input_buffer[1]);\n    switch (input_buffer[0]) {\n    case 0:\n        // neutral\n        break;\n    case 1:\n        // ultrasonic_module\n        ultrasonic_module_reaction();\n        bluetooth_send();\n        break;\n    case 2:\n        // matrix_module\n        matrix_module_reaction();\n        break;\n    case 3:\n        // ID nije kori\u0161ten\n        break;\n    case 4:\n        // ID nije kori\u0161ten\n        break;\n    case 5:\n        // ID nije kori\u0161ten\n        break;\n    case 6:\n        // ID nije kori\u0161ten\n        break;\n    case 7:\n        // demo_module\n        demo_module_reaction();\n        break;\n    case 18:\n        // rescan\n        scan_for_modules();\n        send_return_message();\n        break;\n    case 19:\n        // Promjena modula\n        set_module_id(input_buffer[2]);\n        module_setup(input_buffer[2]);\n        break;\n    default:\n        break;\n    }\n}\n</code></pre>"},{"location":"stvaranje_modula/#uint8_t-get_input_buffer","title":"<code>uint8_t* get_input_buffer()</code>","text":"<p>Pristup svim podacima koji su poslani od strane aplikacije.</p> <pre><code>uint8_t* get_input_buffer() {\n    return input_buffer;\n}\n</code></pre>"},{"location":"stvaranje_modula/#uint8_t-get_output_buffer","title":"<code>uint8_t* get_output_buffer()</code>","text":"<p>Pristup i postavljanje svih podataka podacima koji \u0107e se slati aplikaciji.</p> <pre><code>uint8_t* get_output_buffer() {\n    return output_buffer;\n}\n</code></pre>"},{"location":"stvaranje_modula/#stvaranje-dodatka-u-flutter-aplikaciji","title":"Stvaranje dodatka u Flutter aplikaciji","text":"<p>Sav kod koji je potreban se nalazi u lib mapi. UI koji napravite stavite u mapu <code>lib/panel_screens/screens</code>. Sva dokumentacija za stvaranje UI-a je na slu\u017ebenim stranicama Fluttera. Ovo je primjer jednostavnog UI-a u Flutteru.</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'package:rover_app/providers/modules/ultrasonic_module_provider.dart';\nimport 'package:rover_app/providers/panels.dart';\n/// UI ultrasonic modula\n/// Sadr\u017ei prikaz podataka senzora udaljenosti\n/// Koristi [UltrasonicModuleProvider]\nclass UltrasonicModulePanel extends StatelessWidget {\n    const UltrasonicModulePanel({super.key});\n    @override\n\n    Widget build(BuildContext context) {\n    // Ova linija je bitna, ona ozna\u010dava koji je ovo ID\n    Provider.of&lt;Panels&gt;(context, listen: false).changeToModule(context, 1);\n\n    return Consumer&lt;UltrasonicModuleProvider&gt;(\n        builder: (context, provider, child) {\n            return Center(\n                child: Text('${provider.distance} cm',\n                style: const TextStyle(fontSize: 30, fontWeight: FontWeight.bold)));\n        });\n    }\n}\n</code></pre> <p>\u0160to se upravlja\u010dkog djela koda ona se kontrolira providerom. Provider je upravlja\u010d stanja u Flutteru i jednostavno se koristi. Te datoteke se stavljaju u mapu <code>lib/providers/modules</code>.</p> <pre><code>import 'package:flutter/material.dart';\nimport 'package:rover_app/providers/bt_controller.dart';\n/// Demo modul provider\n///\n/// Sadr\u017ei jedan ultrasonic modul\n/// \u0160alje i prima podatke\n/// \u0160alje u formatu\n/// [trig]\n/// Prima u formatu\n/// [prvi broj][drugi broj]\n/// udaljenost = prvi broj + drugi broj\nclass UltrasonicModuleProvider extends ChangeNotifier {\n    int distance = 0;\n    void getDistance(List&lt;int&gt; inputBuffer) {\n        distance = inputBuffer[1] + inputBuffer[2];\n        notifyListeners();\n    }\n\n    /// Pokre\u0107e funkciju koje je aktivna u pozadini cijelo vrijeme\n    /// Svake pola sekunde po\u0161alji ping za osvje\u017eavanje udaljenosti ako je\n    /// odabran taj modul\n    void startUltrasonicService(BtController bt) async {\n        while (true) {\n        await Future.delayed(const Duration(milliseconds: 2500), () {\n            if (bt.mode == 1) {\n                bt.sendMessage();\n            }\n        });\n        }\n    }\n}\n</code></pre> <p>Nakon \u0161to napi\u0161ete ta dva djela, morate ih dodati u program. Zato dodajemo provider i UI u nekoliko dijelova koda:</p> <p><code>main.dart</code> <pre><code>void main() {\n    WidgetsFlutterBinding.ensureInitialized();\n    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);\n    /// Provideri za module (dodajte ako mislite napraviti modul)\n    DemoModuleProvider demoModuleProvider = DemoModuleProvider();\n    UltrasonicModuleProvider ultrasonicModuleProvider =\n    UltrasonicModuleProvider();\n    MatrixModuleProvider matrixModuleProvider = MatrixModuleProvider();\n    /// ---------------------\n    /// Provideri za panele i Bluetooth\n    Panels panels = Panels();\n    BtController btController =\n    BtController(panels, demoModuleProvider, ultrasonicModuleProvider, matrixModuleProvider);\n    ///                                             ^\n    ///                                        Novi provider\n\n    /// ...\n\n    /// Paljenje aplikacije i postavljane je horizontalno\n    SystemChrome.setPreferredOrientations([\n        DeviceOrientation.landscapeRight,\n        DeviceOrientation.landscapeLeft,\n    ]).then((value) {\n        [\n        Permission.location,\n        Permission.bluetooth,\n        Permission.bluetoothConnect,\n        Permission.bluetoothScan\n        ].request().then((status) {\n            runApp(MultiProvider(providers: [\n            ChangeNotifierProvider(create: (_) =&gt; btController),\n            ChangeNotifierProvider(create: (_) =&gt; panels),\n            ChangeNotifierProvider(create: (_) =&gt; demoModuleProvider),\n            ChangeNotifierProvider(create: (_) =&gt; ultrasonicModuleProvider), /// &lt;- Novi provider\n            ChangeNotifierProvider(create: (_) =&gt; matrixModuleProvider)\n        ], child: const MainApp()));\n    });\n</code></pre></p> <p><code>panels.dart</code></p> <pre><code>final Map&lt;int, StatelessWidget&gt; moduleById = {\n    16: const MainPanel(),\n    1: const UltrasonicModulePanel(), /// &lt;- Novi panel\n    2: const MatrixModulePanel(),\n    7: const DemoModulePanel()\n};\n</code></pre> <p><code>bt_controller.dart</code></p> <pre><code>BtController(\n    this._panelsProvider,\n    this.demoModuleProvider,\n    this.ultrasonicModuleProvider, /// &lt;- Novi provider\n    this.matrixModuleProvider,\n) {\n    services();\n/// ...\n</code></pre>"},{"location":"stvaranje_modula/#stvaranje-dodatka-za-mikroupravljac","title":"Stvaranje dodatka za mikroupravlja\u010d","text":"<p>Dodatak za mikroupravja\u010d je lak\u0161e dodavati negu u Flutteru, kod se stavlja u src mapu, i doda linija u <code>CMakeLists.txt</code></p> <pre><code>cmake_minimum_required(VERSION 3.13)\ninclude(pico_sdk_import.cmake)\nproject(rover-pico C CXX ASM)\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\npico_sdk_init()\n\n# sve nove datoteke se dodaju u add_executable\nadd_executable(main\nsrc/main.c\nsrc/bluetooth.c\nsrc/system_manager.c\nsrc/demo_module.c\nsrc/ultrasonic_module.c\nsrc/matrix_module.c\n)\n\npico_enable_stdio_usb(main 1)\npico_enable_stdio_uart(main 1)\n\ntarget_link_libraries(main pico_stdlib hardware_pwm hardware_gpio hardware_spi hardware_timer\npico_multicore)\n\npico_add_extra_outputs(main)\n</code></pre> <p>Primjer stvaranja modula:</p> <p><code>ultrasonic_module.c</code></p> <pre><code>#include \"demo_module.h\"\n\n#define PWM_MAX_LEVEL 255\n\nvoid init_demo_module(){\n    // Buzzer\n    gpio_set_dir(7, GPIO_OUT);\n\n    // LED 1-3\n    gpio_set_dir(3, GPIO_OUT);\n    gpio_set_dir(4, GPIO_OUT);\n    gpio_set_dir(5, GPIO_OUT);\n\n    // LED RGB\n    init_pwm(0);\n    init_pwm(1);\n    init_pwm(2);\n}\n\nvoid demo_module_reaction() {\n    // [mode][id][motor][led1][led2][led3][R][G][B][BUZZER]\n    //    0    1    2      3    4     5    6  7  8    9\n\n    uint8_t *message = get_input_buffer();\n\n    gpio_put(3, message[2]);\n    gpio_put(4, message[3]);\n    gpio_put(5, message[4]);\n\n    gpio_put(7, message[8]);\n\n    uint8_t R = message[5];\n    uint8_t G = message[6];\n    uint8_t B = message[7];\n\n    set_pwm(0, R / 255.0);\n    set_pwm(1, G / 255.0);\n    set_pwm(2, B / 255.0);\n}\n\n// Inicijalizacija PWM-a\nvoid init_pwm(uint8_t gpio) {\n    uint slice_num = pwm_gpio_to_slice_num(gpio);\n    pwm_config config = pwm_get_default_config();\n\n    pwm_config_set_wrap(&amp;config, PWM_MAX_LEVEL);\n    pwm_init(slice_num, &amp;config, true);\n    gpio_set_function(gpio, GPIO_FUNC_PWM);\n}\n\n// Postavi PWM\nvoid set_pwm(uint8_t gpio, float duty_cycle) {\n    uint slice_num = pwm_gpio_to_slice_num(gpio);\n    uint pwm_level = (uint)(duty_cycle * PWM_MAX_LEVEL);\n    pwm_set_gpio_level(gpio, pwm_level);\n}\n</code></pre> <p><code>ultrasonic_module.h</code></p> <pre><code>#ifndef DEMO_MODULE_H_\n#define DEMO_MODULE_H_\n\n#include &lt;stdlib.h&gt;\n#include \"pico/stdlib.h\"\n#include \"hardware/gpio.h\"\n#include \"hardware/pwm.h\"\n#include \"bluetooth.h\"\n\nvoid init_demo_module();\nvoid demo_module_reaction();\nvoid init_pwm(uint8_t gpio);\nvoid set_pwm(uint8_t gpio, float duty_cycle);\n\n#endif // DEMO_MODULE_H_\n</code></pre> <p><code>bluetooth.c</code></p> <pre><code>void response() {\n    gpio_put(25, uart_data_waiting);\n    motor_driver(input_buffer[1]);\n    switch (input_buffer[0]) {\n        case 0:\n            // neutral\n            break;\n        case 1:\n            // ultrasonic_module\n            ultrasonic_module_reaction();   // &lt;- dodana funkcija za obradu podataka\n            bluetooth_send();               // &lt;- funkcija slanja podataka\n            break;\n        case 2:\n            // matrix_module\n            matrix_module_reaction();\n            break;\n        case 3:\n            // ID nije kori\u0161ten\n            break;\n        case 4:\n            // ...\n</code></pre>"},{"location":"stvaranje_modula/#stvaranje-pcb-a","title":"Stvaranje PCB-a","text":"<p>Ovako bi izgledao osnovni dio modula, Ovo je primjer za ID 1 (prou\u010di NOT gate). Putem Buffera se kontroliraju komponente. 3 integrirana kruga kontroliraju protok podataka prema ostalim komponentama.</p> <p></p>"},{"location":"tehnicka_dokumentacija/","title":"Tehni\u010dka dokumentacija","text":""},{"location":"tehnicka_dokumentacija/#softver","title":"Softver","text":""},{"location":"tehnicka_dokumentacija/#lista-znacajki-aplikacije","title":"Lista zna\u010dajki aplikacije","text":""},{"location":"tehnicka_dokumentacija/#pocetni-ekran","title":"Po\u010detni ekran","text":"<ul> <li>Skeniranje i spajanje s vozilom</li> <li>Prikaz informacija o aplikaciji</li> <li>Prijevod</li> </ul>"},{"location":"tehnicka_dokumentacija/#upravljanje","title":"Upravljanje","text":"<ul> <li>Skeniranje spojenih modula</li> <li>Upravljanje kretanja vozila</li> <li>Upravljanje razli\u010ditih modula</li> </ul>"},{"location":"tehnicka_dokumentacija/#moduli","title":"Moduli","text":""},{"location":"tehnicka_dokumentacija/#demo-modul","title":"Demo modul","text":"<ul> <li>Upravljanje 3 jednobojne LED diode</li> <li>Upravljanje RGB diode</li> <li>Upravljanje zujalice</li> </ul>"},{"location":"tehnicka_dokumentacija/#matrix-modul","title":"Matrix modul","text":"<ul> <li>Upravljanje matrix ekrana aplikacijom i serijskim prijenosom</li> <li>Crtanje oblika na matrici</li> </ul>"},{"location":"tehnicka_dokumentacija/#ultrasonicni-modul","title":"Ultrasoni\u010dni modul","text":"<ul> <li>Ulazno izlazna mogu\u0107nost podataka</li> <li>Prikaz udaljenosti</li> </ul>"},{"location":"tehnicka_dokumentacija/#sistemska-konfiguracija","title":"Sistemska konfiguracija","text":"<p>Ne\u0107e svi ure\u0111aji biti u stanju upotrebljavati ovu aplikaciju. Navedeno je vi\u0161e sistemskih konfiguracija, jedna za mobitele te je jedna za ra\u010dunala. Konfiguracija za ra\u010dunala je potrebna samo ako mislite stvarati module.</p>"},{"location":"tehnicka_dokumentacija/#preporucena-sistemska-konfiguracija-za-mobilne-ureaje","title":"Preporu\u010dena sistemska konfiguracija za mobilne ure\u0111aje","text":"<ul> <li>Mobilni ure\u0111aj ili tablet s operacijskim sustavom Android</li> <li>RAM memorija 4 GB</li> <li>30 MB slobodnog prostora (1 GB slobodnog prostora za razvoj modula)</li> <li>Bluetooth Classic</li> </ul>"},{"location":"tehnicka_dokumentacija/#preporucena-sistemska-konfiguracija-za-racunala","title":"Preporu\u010dena sistemska konfiguracija za ra\u010dunala","text":"<ul> <li>Procesor s 4 jezgre i radnim taktom 3 GHz</li> <li>RAM memorija 8 GB</li> <li>10 GB ili vi\u0161e slobodnog prostora</li> <li>Operacijski sustav Windows, Linux ili MacOS</li> </ul>"},{"location":"tehnicka_dokumentacija/#potreban-softver","title":"Potreban  softver","text":""},{"location":"tehnicka_dokumentacija/#windows","title":"Windows","text":"<ul> <li>Android Studio</li> <li>Flutter SDK</li> <li>Raspberry Pi Pico C/C++ SDK</li> <li>Visual Studio Code</li> </ul>"},{"location":"tehnicka_dokumentacija/#linux","title":"Linux","text":"<ul> <li>Android Studio</li> <li>Flutter SDK</li> <li>Raspberry Pi Pico C/C++ SDK</li> <li>Visual Studio Code</li> <li>CMake</li> <li>GNU GCC</li> </ul>"},{"location":"tehnicka_dokumentacija/#macos","title":"MacOS","text":"<ul> <li>Android Studio</li> <li>Flutter SDK</li> <li>Raspberry Pi Pico C/C++ SDK</li> <li>Visual Studio Code</li> <li>CMake</li> <li>GNU GCC</li> </ul>"},{"location":"tehnicka_dokumentacija/#tehnologije","title":"Tehnologije","text":"<p>Projekt ROVER napravljen je pomo\u0107u vi\u0161e tehnologija. Odabrane su tehnologije koje su popularne, \u010desto odr\u017eavane i jednostavne za nau\u010diti. Za samu aplikaciju smo koristili Flutter. To je open-source SDK (software development kit) napravljen od strane Google-a. Koristi se za programiranje brzih cross-platform aplikacija. Unato\u010d tome ova aplikacija se koristi samo na android ure\u0111ajima jer iOS nema mogu\u0107nost kori\u0161tenja Bluetooth Classic. Za programiranje logike i UI-a se koristi Dart programski jezik. Mikroupravlja\u010d koji smo koristili je bio Raspberry Pi Pico. On ima mogu\u0107nost programirati se u Micropythonu ili C/C++ pomo\u0107u SDK-a. Odabrali smo programirati u C-u jer je to programski jezik s kojim smo upoznati i u usporedbi s Micropythonom je puno br\u017ei. GitHub koristimo za kontrolu verzije. Napravili smo organizaciju u kojoj smo stavili repozitorije projekta.</p>"},{"location":"tehnicka_dokumentacija/#optimizacija","title":"Optimizacija","text":"<p>Ulo\u017een je dodatan trud u optimizaciju ROVERA, i sa strane aplikacije i mikroupravlja\u010d. Putem bluetooth-a komunicira slanjem ve\u0107 dogovorenim formatom poruke. Aplikacija je pisana asinkrono, \u0161to ubrzava aplikaciju posebice u djelovima slanja i primanja poruka.</p>"},{"location":"tehnicka_dokumentacija/#instalacija-aplikacije","title":"Instalacija aplikacije","text":"<p>Trenutno postoji dva na\u010dina za instaliranje aplikacije. Ako ne planirate nadograditi ROVER ili njegovu aplikaciju, preporu\u010duje se preuzimanje APK datoteke s GitHub repozitorija. No, ako \u017eelite modificirati aplikaciju ili ROVER, preporu\u010duje se kloniranje repozitorija na ra\u010dunalo i otvaranje projekta u razvojnom okru\u017eenju poput VSCode-a ili Android Studija. Kada je u pitanju u\u010ditavanje koda na mikroupravlja\u010d, postupak je sljede\u0107i: klonirate repozitorij i prenesete main.uf2 datoteku na mikroupravlja\u010d. Kod se prenosi tako da tijekom spajanja Raspberry Pi Pico putem USB-a dr\u017eite BOOTSEL gumb. Na ra\u010dunalu \u0107e se pojaviti nova jedinica za pohranu na koju \u0107ete kopirati main.uf2 datoteku.</p>"},{"location":"tehnicka_dokumentacija/#sigurnost","title":"Sigurnost","text":"<p>Sigurnost ove aplikacije je potpuno zajam\u010dena jer ne koristi nikakve online servise. Tako\u0111er, i pristupni podaci i algoritmi kori\u0161teni za komunikaciju su sigurni, a provjerava se i to\u010dnost formata. U slu\u010daju neto\u010dnih formata, ne\u0107e se dogoditi nikakav ne\u017eeljeni ishod. Dodatno, budu\u0107i da je cijeli kod otvorenog koda (open-source), korisnici imaju potpunu transparentnost i mogu prou\u010diti svaki dio prije instalacije.</p>"},{"location":"tehnicka_dokumentacija/#hardver","title":"Hardver","text":""},{"location":"tehnicka_dokumentacija/#popis-djelova-i-tehnologija","title":"Popis djelova i tehnologija","text":"<ul> <li>Mikroupravlja\u010d - Raspberry Pi Pico, koji omogu\u0107uje programiranje u C/C++</li> <li>Motor - JGA25-370 motor na 12V 100RPM x4</li> <li>Upravlja\u010d motora BTS7960B x2</li> <li>Komunikacijski modul \u2013 HC-05 (Bluetooth Classic)</li> <li>Komponente - SN74AC245N x2, SN74AC244N x1, SN74AC04N x3, SN74HC11N x3, LD1117V33 x3, 1k\u03a9 resistor x2, LED diode x3, header pins, LM2596 buck-converter x1, LM2940-5 x1</li> <li>Senzori i dodatni djelovi - 8x8 Matrix, Buzzer, Ultrasonic sensor</li> <li>Napajanje 12V baterija</li> <li>3D modeli</li> </ul>"},{"location":"tehnicka_dokumentacija/#elektronicke-sheme","title":"Elektroni\u010dke sheme","text":""},{"location":"tehnicka_dokumentacija/#glavna-shema","title":"Glavna shema","text":""},{"location":"tehnicka_dokumentacija/#demo-modul_1","title":"Demo modul","text":""},{"location":"tehnicka_dokumentacija/#matrix-modul_1","title":"Matrix modul","text":""},{"location":"tehnicka_dokumentacija/#ultrasonicni-modul_1","title":"Ultrasoni\u010dni modul","text":""},{"location":"tehnicka_dokumentacija/#pcb","title":"PCB","text":""},{"location":"tehnicka_dokumentacija/#glavni-pcb","title":"Glavni PCB","text":""},{"location":"tehnicka_dokumentacija/#demo-modul_2","title":"Demo modul","text":""},{"location":"tehnicka_dokumentacija/#matrix-modul_2","title":"Matrix modul","text":""},{"location":"tehnicka_dokumentacija/#ultrasonicni-modul_2","title":"Ultrasoni\u010dni modul","text":""},{"location":"tehnicka_dokumentacija/#3d-modeli","title":"3D modeli","text":""},{"location":"tehnicka_dokumentacija/#rover-bez-modula","title":"Rover bez modula","text":""},{"location":"tehnicka_dokumentacija/#rover-sa-modulima","title":"Rover sa modulima","text":""},{"location":"tehnicka_dokumentacija/#ultrasonicni-modul_3","title":"Ultrasoni\u010dni modul","text":""},{"location":"tehnicka_dokumentacija/#demo-modul_3","title":"Demo modul","text":""},{"location":"tehnicka_dokumentacija/#matrix-modul_3","title":"Matrix modul","text":""},{"location":"tehnicka_dokumentacija/#proces-izrade","title":"Proces izrade","text":""},{"location":"tehnicka_dokumentacija/#prva-faza-izrada-mobilne-aplikacije","title":"Prva faza: izrada mobilne aplikacije","text":"<p>U prvoj fazi razvoja mobilne aplikacije, odlu\u010dili smo koristiti Flutter kao razvojno okru\u017eenje. Budu\u0107i da Flutter ne podr\u017eava Bluetooth funkcionalnost, bili smo primorani koristiti programski paket flutter_blue_serial. Iako je to bila jedina opcija za integraciju Bluetooth Classic tehnologije, nai\u0161li smo na izazov zbog nedostatka dokumentacije. Morali smo temeljiti na\u0161e razumijevanje paketa na primjerima i vlastitom istra\u017eivanju kako bismo shvatili njegovo funkcioniranje.</p> <p>Kako bismo olak\u0161ali razvoj ne samo nama ve\u0107 i budu\u0107im korisnicima, napisali smo funkcije za upravljanje Bluetooth vezom. Ovo je omogu\u0107ilo jednostavnije implementiranje Bluetooth komunikacije u na\u0161u aplikaciju.</p> <p>Za testiranje funkcionalnosti aplikacije, izradili smo malu platformu za \"mock-testing\". Povezali smo Raspberry Pi Pico mikroupravlja\u010d s HC-05 Bluetooth \u010dipom i programirali ga da generira unaprijed definirane poruke i podatke. Ovo testiranje omogu\u0107ilo nam je provjeru ispravnosti Bluetooth komunikacije u kontroliranom okru\u017eenju prije nego \u0161to smo se upustili u testiranje s pravim ure\u0111ajima.</p>"},{"location":"tehnicka_dokumentacija/#druga-faza-izrada-upravljackog-koda-na-raspberry-pi-pico-u","title":"Druga faza: izrada upravlja\u010dkog koda na Raspberry Pi Pico-u","text":"<p>U drugoj fazi razvoja, nakon \u0161to smo utvrdili da je ve\u0107ina funkcionalnosti aplikacije spremna za upotrebu, usredoto\u010dili smo se na pisanje upravlja\u010dkog koda za Raspberry Pi Pico. Budu\u0107i da ve\u0107i dio hardvera nije bio dostupan u tom trenutku, pristupili smo programiranju tako \u0161to smo kod podijelili u segmente koje smo zasebno testirali.</p> <p>Ovaj pristup omogu\u0107io nam je temeljito testiranje svake komponente prije nego \u0161to smo je integrirali s ostatkom koda. Kada bismo utvrdili da odre\u0111ena komponenta pravilno funkcionira, izolirali bismo je od ostatka koda kako bismo osigurali njenu stabilnost i ispravnost u cjelokupnom sustavu.</p> <p>Za testiranje izoliranih dijelova koda koristili smo aplikaciju koja je ve\u0107 bila dostupna. Ovo nam je omogu\u0107ilo simuliranje stvarnog korisni\u010dkog iskustva i provjeru funkcionalnosti upravlja\u010dkog koda u kontroliranom okru\u017eenju prije nego \u0161to smo ga integrirali s ostatkom aplikacije.</p>"},{"location":"tehnicka_dokumentacija/#treca-faza-zrada-elektronickih-shema-i-dizajn-pcb-a","title":"Tre\u0107a faza: zrada elektroni\u010dkih shema i dizajn PCB-a","text":"<p>Tre\u0107a faza projekta uklju\u010duje izradu elektroni\u010dkih shema i dizajn tiskanih plo\u010dica (PCB-a) koriste\u0107i platformu EasyEDA. Po\u010detak ove faze obuhva\u0107a detaljno planiranje i skiciranje elektroni\u010dke sheme koja predstavlja logi\u010dku strukturu i povezanost svih elektroni\u010dkih komponenti u projektu.</p> <p>Nakon zavr\u0161etka sheme, proces se nastavlja pretvaranjem shematskog prikaza u fizi\u010dki dizajn PCB-a unutar iste platforme. Omogu\u0107ena je automatska konverzija shematskog dijagrama u nacrt PCB-a, nakon kojeg je potrebno ru\u010dno prilago\u0111avanje rasporeda komponenti, tragova, slojeva i drugih elemenata kako bi ostvarili tra\u017eenu funkcionalnost.</p> <p>Zavr\u0161ni korak u ovoj fazi uklju\u010duje pregled i finalizaciju dizajna PCB-a, pri \u010demu se provjeravaju sve dimenzije, povezanosti i specifikacije komponenti kako bi se osiguralo da je sve u skladu s tehni\u010dkim zahtjevima i standardima. Nakon zadovoljavaju\u0107e provjere, dizajn se izvozi u standardnom formatu za proizvodnju, poput Gerber datoteka, koje se zatim mogu koristiti za naru\u010divanje gotovih PCB-a od proizvo\u0111a\u010da.</p>"},{"location":"tehnicka_dokumentacija/#cetvrta-faza-3d-modeliranje","title":"\u010cetvrta faza: 3D modeliranje","text":"<p>\u010cetvrta faza projekta obuhva\u0107a 3D modeliranje koriste\u0107i Onshape, potpuno cloud-bazirana CAD platforma koja omogu\u0107ava korisnicima izradu preciznih 3D modela komponenata i sklopova unutar samog preglednika. Proces zapo\u010dinje definiranjem i skiciranjem osnovnih oblika i dimenzija svih potrebnih dijelova, uklju\u010duju\u0107i glavno tijelo ROVER-a, nosa\u010de, i druge strukturne elemente, a zavr\u0161ava izvozom modela u STL formatu, koji je kompatibilan s 3D printerima.</p>"},{"location":"tehnicka_dokumentacija/#zavrsni-proizvod","title":"Zavr\u0161ni proizvod","text":"<p>Kada imamo sve dijelove i potreban kod, bilo je potrebno samo slo\u017eiti. Ovo je sada spremo za uporabu i daljnje modificiranje.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"}]}